description="The long term stable kernel version"
url="http://www.kernel.org"

packager="Grat-OS Team"
maintainer="rems"

PKGMK_IGNORE_UNPACK="yes"
PKGMK_NO_STRIP="yes"
PKGMK_GROUPS=(devel doc)

makedepends=(grat-os)

name=kernel-lts
alias=(linux-lts)

version=4.19.219
_version=${version%.*}

run=(grat-os)

## Download all the sources

source=($url/pub/linux/kernel/v4.x/linux-${_version}.tar.xz
        https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/patch-$version.xz
        config_64)

## Time to build everything

x86_build() {

  bsdtar -p -o -C $SRC -xf linux-${_version}.tar.xz

  cd linux-${_version}

  if [ -f $SRC/patch-$version.xz ]; then
    xz -d -c  $SRC/patch-$version.xz | patch -Np1
  fi

  make mrproper
  cp $SRC/config_64 ./.config

  # make menuconfig

  make

  cp .config $SRC/config_64

  ## Modules
  #
  # Kernel modules
  cd $SRC/linux-${_version}
  make INSTALL_MOD_PATH=$PKG DEPMOD=/bin/true modules_install

  KERNEL_VERSION="${version}-Grat-OS-lts"

  # depmod needed
  depmod -b $PKG -a ${KERNEL_VERSION}

  # Install config and kernel files
  cd $SRC/linux-${_version}

  mkdir -p $PKG/boot

  cp  System.map \
  $PKG/boot/System_64.map-$version-Grat-OS-lts
  cp  .config    \
  $PKG/boot/config_64-$version-Grat-OS-lts
  cp  arch/x86_64/boot/bzImage \
  $PKG/boot/kernel-$version-Grat-OS-lts

  # Reorgenise the sources
  cd $PKG/lib/modules/${KERNEL_VERSION}/

  mkdir -p $PKG/usr/src

  mv $SRC/linux-${_version} $PKG/usr/src/
  rm {build,source}

  ln -sv ../../../usr/src/linux-${_version} build
  ln -sv ../../../usr/src/linux-${_version} source

  mkdir $SRC/linux-${_version}
  mv $PKG/usr/src/linux-${_version}/Documentation \
  $SRC/linux-${_version}

  # Firmware are in linux-firmware
  rm -rf $PKG/lib/firmware

  # post-install autogen
echo 'LK="."
[ -L boot/kernel-lts ] && LK="`readlink boot/kernel-lts`"
if [ "`dirname $LK`" != "." ]; then
  echo "This is a efi installation"
  ln -sf $LK boot/kernel-lts
  if [ -f boot/$LK ]; then' > $PKGMK_ROOT/$name.post-install
    echo "    mv boot/kernel-$version-Grat-OS-lts boot/\$LK 2>/dev/null
    ln -sf \$LK boot/kernel-$version-Grat-OS-lts
  else
    echo \"EFI Partition not found, mount EFI Partition and re-install the kernel\"
  fi
else
  echo \"This is a bios installation\"
  if [ -L boot/initrd-lts ]; then
    if [[ -x usr/bin/dracut ]]; then
      dracut --kver ${KERNEL_VERSION} 2>&1 > /dev/null
      ln -sf initramfs-${KERNEL_VERSION} boot/initrd-lts
    else
      mkinitramfs ${KERNEL_VERSION}
      ln -sf initrd-${KERNEL_VERSION} boot/initrd-lts
    fi
  fi
  ln -sf kernel-${KERNEL_VERSION} boot/kernel-lts
fi" >> $PKGMK_ROOT/$name.post-install
}

build() {

case $(uname -m) in
  x86_64|i686)
    x86_build
  ;;
  armhf|armel|aarch64)
    echo "Nothing to do in Arm arch for the moment"
    mkdir $PKG/usr
    cat > $PKGMK_ROOT/$name.post-install << EOF
source lib/lsb/init-functions
echo -e "\${FAILURE}Package $name is not available for ARM arch for the moment"
echo -e "Please remove the package as soon you have seen this message\${NORMAL}"
EOF
  ;;
esac
}

x86_devel() {

cd $PKG
for i in alpha arc arm arm26 arm64 avr32 blackfin c6x \
cris frv h8300 hexagon ia64 m32r m68k m68knommu metag \
mips microblaze mn10300 openrisc parisc powerpc ppc s390 \
score sh sh64 sparc sparc64 tile unicore32 um v850 xtensa
do rm -rf usr/src/linux-${_version}/arch/$i
done

bsdtar -cf \
$PKGMK_PACKAGE_DIR/$name.devel${PKGMK_BUILDVER}any.${PKGMK_PACKAGE_EXT} \
usr/src/linux-${_version}

rm -r usr
}

devel() {

case $(uname -m) in
  x86_64|i686)
    x86_devel
  ;;
  arm|aarch64)
    echo "Nothing to do in Arm arch for the moment"
    cat > $PKGMK_ROOT/$name.devel.post-install << EOF
source lib/lsb/init-functions
echo -e "\${FAILURE}Package $name is not available for ARM arch for the moment"
echo -e "Please remove the package as soon you have seen this message\${NORMAL}"
EOF
  ;;
esac
}

x86_doc() {

cd $PKG
mkdir -p usr/share/doc
mv $SRC/linux-${_version}/Documentation \
usr/share/doc/linux-$version

bsdtar -cf \
$PKGMK_PACKAGE_DIR/$name.doc${PKGMK_BUILDVER}any.${PKGMK_PACKAGE_EXT} \
usr/share/doc/linux-$version

rm -r usr
}

doc() {

case $(uname -m) in
  x86_64|i686)
    x86_doc
  ;;
  armhf|armel|aarch64)
    echo "Nothing to do in Arm arch for the moment"
    cat > $PKGMK_ROOT/$name.doc.post-install << EOF
source lib/lsb/init-functions
echo -e "\${FAILURE}Package $name is not available for ARM arch for the moment"
echo -e "Please remove the package as soon you have seen this message\${NORMAL}"
EOF
  ;;
esac
}
